-- 1.JOIN
-- 2.UNION
-- 3.subquery
-- 
-- 1-1 sql에서 JOIN 은 여러 테이블에서 데이터를 가져와 결합하는 기능을 한다
-- rdbs에서는 데이터의 중복을 피하고 쉽게 관리하기 위해 데이터를 여러곳에 나누어 보관합니다.
-- 	ex) 어떤 주문을 담당한 직원을 확인하고 싶은데, 주문아이디 orders 테이블에 있고,
-- 		직원 이름은 staff 테이블에 있으면 어떻게 쿼리를 입력해야 하는지 
-- 		
-- 	이상에서 이루어지는 데이터 분산을 '데이터 정규화(data normalize)'라고 하며
-- 	데이터베이스에서 중복을 최소화 하고 데이터의 일관성을 유지하기 위함.
-- 	
-- 	1) JOIN 
-- 		지금까지는 테이블 하나의 데이터를 필터링 등을 다루는 연습을 함.
-- 		이제는 둘 이상의 테이블을 함께 다루며 해당 키워드를 통해 합쳐서 보는 연습 실시
-- 		
-- 		실습 데이터 기준
-- 		)국가별로 주문건수 알고 싶다면 users와 orders가 필요
-- 		즉 하나의 테이블로는 원하는 정보 출력이 불가.
-- 		
-- 		일반적으로 JOIN 의 개념은 중학교 1학년때 배우는 집합 개념을 생각
-- 		두개의 데이터 집합을 하나로 결합하는 기능 지님
-- 		즉, 기본적으로는 '서로 다른 두 테이블 간의 공통인 키를활용'하여 테이블 합침
		
-- users와 orders를 하나로 결합하여 출력(주문정보가 있는 회원만 출력)
SELECT *
	FROM USERS U INNER JOIN ORDERS O ON u.id = o.USER_ID 
	;
-- 이상의 sql 문에 대한 해석
-- 기존의 from 다음에는 테이블 명 하나만 작성되었으나 이제는 join 연산을 위한
-- 추가 문법 적용되었음
-- 회원 정보와 주문 정보를 하나로 결합 하기 위해 users와 orders 를 INNER JOIN 으로 묶고
-- '후속조건'으로 "주문정보가 있는 회원정보만 출력하기 위해"u.id=o.user_id 를 입력
-- 
-- users 의 pk값인 id는 회원 id 에 해당
-- orders의 pk값인 id는 주문 id 에 해당하고, 두번째 컬럼인 user_id는 
-- orders에서는 pk값이 아니지만 JOIN 을 수행할때 users와 합치는 조건이 된다.
